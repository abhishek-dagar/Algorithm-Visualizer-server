declare namespace Randomize {
    type IntegerOptions = {
        /**
         * The inclusive lower bound.
         */
        min?: number;
        /**
         * The inclusive upper bound.
         */
        max?: number;
    };
    function Integer(options?: IntegerOptions): number;
    type DoubleOptions = {
        /**
         * The inclusive lower bound.
         */
        min?: number;
        /**
         * The exclusive upper bound.
         */
        max?: number;
    };
    function Double(options?: DoubleOptions): number;
    type StringOptions = {
        length?: number;
        /**
         * The character set to generate a random string from.
         */
        letters?: string;
    };
    function String(options?: StringOptions): string;
    type Array2DOptions = {
        /**
         * The number of rows.
         */
        N?: number;
        /**
         * The number of columns.
         */
        M?: number;
        /**
         * The function to generate the value of each element.
         *
         * @param i The row index of an element to generate the value of.
         * @param j The column index of an element to generate the value of.
         */
        value?: (i: number, j: number) => any;
        /**
         * Whether to sort each row.
         */
        sorted?: boolean;
    };
    function Array2D(options?: Array2DOptions): any[][];
    type Array1DOptions = {
        /**
         * The number of elements.
         */
        N?: number;
        /**
         * The function to generate the value of each element.
         *
         * @param i The index of an element to generate the value of.
         */
        value?: (i: number) => any;
        /**
         * Whether to sort the array.
         */
        sorted?: boolean;
    };
    function Array1D(options?: Array1DOptions): any[];
    type GraphOptions = {
        /**
         * The number of nodes.
         */
        N?: number;
        /**
         * The probability that an edge between any two nodes is generated.
         */
        ratio?: number;
        /**
         * The function to generate the weight of each edge.
         *
         * @param source The id of the node where the edge starts.
         * @param target The id of the node where the edge ends.
         */
        value?: (i: number, j: number) => any;
        /**
         * Whether to make the graph directed.
         */
        directed?: boolean;
        /**
         * Whether to make the graph weighted.
         */
        weighted?: boolean;
    };
    function Graph(options?: GraphOptions): any[][];
}
export default Randomize;
